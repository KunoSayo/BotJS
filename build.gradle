plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply from: 'kff-3.7.1-patched.gradle'

group = 'com.sifsstudio'
version = '1.0-SNAPSHOT'

java {
    archivesBaseName = 'botjs'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'botjs'

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'botjs'

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'botjs'

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'botjs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    minecraftLibrary.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.85'

    shade "org.mozilla:rhino:1.7.14"
}

minecraft.runs.all {
    String previous = lazyTokens['minecraft_classpath'].get()
    lazyToken('minecraft_classpath') {
        configurations.shade.copyRecursive().resolve().collect {
            it.absolutePath
        }.join(File.pathSeparator) + File.pathSeparator + previous
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    archiveClassifier = "slim"
    manifest {
        attributes([
                "Specification-Title"     : "botjs",
                "Specification-Vendor"    : "switefaster, Yaossg, InitAuther97",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "switefaster, Yaossg, InitAuther97",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'org.mozilla', "${project.group}.relocated.rhino"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
