buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
}

apply plugin: 'org.spongepowered.mixin'

version = '1.0-SNAPSHOT'
group = 'com.sifsstudio'
archivesBaseName = 'botjs'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.19.4'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'botjs'

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'botjs'

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'botjs'

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'botjs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                botjs {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    mavenCentral()
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

}

configurations {
    copyImplementation
    implementation.extendsFrom copyImplementation
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.1.0'

//    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation 'thedarkcolour:kotlinforforge:4.3.0'
    copyImplementation 'org.mozilla:rhino:1.7.14'

    jarJar(group: "org.mozilla", name: "rhino", version:"[1.7.14,)") {
        //noinspection GroovyAssignabilityCheck
        jarJar.pin(it, "1.7.14")
    }
}

mixin {
    add sourceSets.main, 'mixins.botjs.refmap.json'
    config 'mixins.botjs.json'
}

task prepare(type: Copy) {
    from { configurations.copyImplementation.files.collect {
        zipTree(it)
    } } into 'build/classes/java/main'
}

classes.finalizedBy('prepare')

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "botjs",
                "Specification-Vendor"    : "switefaster, Yaossg, InitAuther97",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "switefaster, Yaossg, InitAuther97",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

reobf {
    jarJar { }
}
tasks.jarJar.finalizedBy('reobfJarJar')

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
